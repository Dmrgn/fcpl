const pureIds={},pureFunctions={Fact:true},impureIds={},impureFunctions={},importedPureIds={},importedPureFunctions={Difference:function(){const args=[...arguments].flat();let t=args.shift();args.forEach((arg=>{t-=arg}));return t},Exponent:function(){const args=[...arguments].flat();return args[0]**args[1]},Print:function(){console.log(...arguments);return arguments.length>1?arguments:arguments[0]},Product:function(){let t=1;[...arguments].flat().forEach((arg=>{t*=arg}));return t},Quotient:function(){const args=[...arguments].flat();let t=args.shift();args.forEach((arg=>{t/=arg}));return t},Reverse:function(){return[...arguments].flat().reverse()},Sum:function(){let t=0;[...arguments].flat().forEach((arg=>{t+=arg}));return t}},importedImpureIds={},importedImpureFunctions={};pureFunctions["Fact"]=function(x){const pureIds={x:x},pureFunctions={},impureIds={},impureFunctions={};return importedPureFunctions["Product"](pureIds["x"],idNotFound["Fact"](importedPureFunctions["Difference"](pureIds["x"],1)))};pureFunctions["Fact"](10);
// Transplied from fcpl. Version: 0.0.1